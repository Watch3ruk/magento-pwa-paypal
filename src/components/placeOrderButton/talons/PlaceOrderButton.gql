import { gql } from '@apollo/client';

export const GET_PAYPAL_EXPRESS_CONFIG_DATA = gql`
    query storeConfigData {
        storeConfig {
            id
            paypal_express_active
            paypal_express_in_context
            paypal_sandbox_flag
            paypal_client_id
            paypal_payment_action
        }
    }
`;

export const CREATE_PAYPAL_EXPRESS_TOKEN = gql`
    mutation createPaypalExpressToken(
        $cartId: String!
        $cancel_url: String!
        $return_url: String!
        $express_button: Boolean = true
    ) {
        createPaypalExpressToken(
            input: {
                cart_id: $cartId
                code: "paypal_express"
                express_button: $express_button
                urls: { cancel_url: $cancel_url, return_url: $return_url }
            }
        ) {
            token
        }
    }
`;

export const SET_PAYMENT_METHOD_WITH_TOKEN_ON_CART = gql`
    mutation setPaymentMethodOnCart(
        $cartId: String!
        $token: String!
        $payerId: String!
    ) {
        setPaymentMethodOnCart(
            input: {
                cart_id: $cartId
                payment_method: {
                    code: "paypal_express"
                    paypal_express: { payer_id: $payerId, token: $token }
                }
            }
        ) {
            cart {
                id
                selected_payment_method {
                    code
                    title
                }
            }
        }
    }
`;

export default {
    getPaypalExpressConfig: GET_PAYPAL_EXPRESS_CONFIG_DATA,
    createPaypalExpressToken: CREATE_PAYPAL_EXPRESS_TOKEN,
    setPaymentMethodOnCartMutation: SET_PAYMENT_METHOD_WITH_TOKEN_ON_CART
};
